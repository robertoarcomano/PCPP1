1. Overloading operator: __add__
2. dir(obj) shows all capabilities related to obj
3. help(obj) shows documentation related to obj
4. Operators
    Function or operator	Magic method Implementation meaning or purpose
    ==	__eq__(self, other)	equality operator
    !=	__ne__(self, other)	inequality operator
    <	__lt__(self, other)	less-than operator
    >	__gt__(self, other)	greater-than operator
    <=	__le__(self, other)	less-than-or-equal-to operator
    >=	__ge__(self, other)	greater-than-or-equal-to operator
    +	__add__(self, other)	addition operator
    -	__sub__(self, other)	subtraction operator
    *	__mul__(self, other)	multiplication operator
    //	__floordiv__(self, other)	integer division operator
    /	__div__(self, other)	division operator
    %	__mod__(self, other)	modulo operator
    **	__pow__(self, other)	exponential (power) operator
    +	__pos__(self)	unary positive, like a = +b
    -	__neg__(self)	unary negative, like a = -b
    abs()	__abs__(self)	behavior for abs() function
    round(a, b)	__round__(self, b)	behavior for round() function
    +=	__iadd__(self, other)	addition and assignment operator
    -=	__isub__(self, other)	subtraction and assignment operator
    *=	__imul__(self, other)	multiplication and assignment operator
    //=	__ifloordiv__(self, other)	integer division and assignment operator
    /=	__idiv__(self, other)	division and assignment operator
    %=	__imod__(self, other)	modulo and assignment operator
    **=	__ipow__(self, other)	exponential (power) and assignment operator
5. Conversions
Function	Magic method	Implementation meaning or purpose
int()	__int__(self)	conversion to integer type
float()	__float__(self)	conversion to float type
oct()	__oct__(self)	conversion to string, containing an octal representation
hex()	__hex__(self)	conversion to string, containing a hexadecimal representation
6. Attributes
Expression example	Magic method	Implementation meaning or purpose
object.attribute	__getattr__(self, attribute)	responsible for handling access to a non-existing attribute
object.attribute	__getattribute__(self, attribute)	responsible for handling access to an existing attribute
object.attribute = value	__setattr__(self, attribute, value)	responsible for setting an attribute value
del object.attribute	__delattr__(self, attribute)	responsible for deleting an attribute